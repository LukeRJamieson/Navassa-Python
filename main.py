# This file contains code automatically generated by a machine.
# It has not been independently verified by any human.
# The generation process is deterministic and tested (not generative AI),
# but not every scenario or risk has been captured in unit tests.
# All code is provided as-is for example purposes only.
# The customer assumes all risks related to the use of this code.


# 
# Silicon Revision: Presumed C0
# 
# Tx / Rx optimal carrier frequencies: 30 MHz to 6 GHz
# External LO optimal frequencies: 60 MHz to 12 GHz
# 
# FPGA: v0.0.0
# Device Driver API: v0.0.0
# Device Driver Client: v68.13.7
# Firmware: v0.22.30
# Profile Generator: v0.53.6.0
# Stream Generator Assembly: v0.7.11.0
# Transceiver Evaluation Software: v0.26.0
# ADRV9001 Plugin: v0.26.0



def build_str_buff(size, s):
	buff = [0] * size
	ba = bytearray(s, 'utf8')
	for i, v in enumerate(ba):
		buff[i] = v
	return buff



from time import sleep
import initialize
import calibrate
import configure
import prime
import beginTransmitting
import stopTransmitting
import connect
import beamform
import numpy as np

def main():
	board, adrv9001_device_0, fpga9001_device_0 = connect.connect()

	initialize.initialize(adrv9001_device_0, fpga9001_device_0, board);

	calibrate.calibrate(adrv9001_device_0);

	configure.configure(adrv9001_device_0);

	prime.prime(adrv9001_device_0);

	beginTransmitting.begin_transmitting(adrv9001_device_0, fpga9001_device_0);

	cycles = 20
	delay_phases = np.arange(-180,180,2)
	for i in range(cycles):
		for phase_delay in delay_phases:
			beamform.beamForm(adrv9001_device_0, fpga9001_device_0,phase_delay,0)
			sleep(0.1)

	stopTransmitting.stop_transmitting(fpga9001_device_0);

	connect.finish()

main()