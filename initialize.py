# This file contains code automatically generated by a machine.
# It has not been independently verified by any human.
# The generation process is deterministic and tested (not generative AI),
# but not every scenario or risk has been captured in unit tests.
# All code is provided as-is for example purposes only.
# The customer assumes all risks related to the use of this code.


# 
# Silicon Revision: Presumed C0
# 
# Tx / Rx optimal carrier frequencies: 30 MHz to 6 GHz
# External LO optimal frequencies: 60 MHz to 12 GHz
# 
# FPGA: v0.0.0
# Device Driver API: v0.0.0
# Device Driver Client: v68.13.7
# Firmware: v0.22.30
# Profile Generator: v0.53.6.0
# Stream Generator Assembly: v0.7.11.0
# Transceiver Evaluation Software: v0.26.0
# ADRV9001 Plugin: v0.26.0

from initializeinit3 import *
from initializeradioCtrlInit3 import *
import os
import adrv9001_python_wrappers.analog_devices_common_api as common_api_types
import adrv9001_python_wrappers.analog_devices_eval_client_adrv9001_device as adrv9001_types
import adrv9001_python_wrappers.analog_devices_eval_client_fpga9001_device as fpga9001_types
import adrv9001_python_wrappers.analog_devices_adrv9001_profile_types as adrv9001_profile_types
import adrv9001_python_wrappers.analog_devices_eval_client_adrv9001_board as adrv9001_board_types
from adrv9001_python_wrappers import flags
flags.DEEP_PRINT = True


def build_str_buff(size, s):
	buff = [0] * size
	ba = bytearray(s, 'utf8')
	for i, v in enumerate(ba):
		buff[i] = v
	return buff



def initialize(adrv9001_device_0: adrv9001_types.Adrv9001Device, fpga9001_device_0: fpga9001_types.Fpga9001Device, board: adrv9001_board_types.Adrv9001BoardCe):
	global initialize_init_3
	global initialize_radio_ctrl_init_3
	api_version_0 = common_api_types.common_ApiVersion_t(0, 0, 0)
	error_code = adrv9001_device_0.core.ApiVersion_Get(api_version_0)

	print("ApiVersion_Get parameter 'apiVersion' read back as '(" + "common_api_types.common_ApiVersion_t : " + str(api_version_0) + ")'\n")

	fpga_version_1 = fpga9001_types.fpga9001_Version_t(0, 0, 0)
	error_code = fpga9001_device_0.core.VersionGet(fpga_version_1)

	print("VersionGet parameter 'fpgaVersion' read back as '(" + "fpga9001_types.fpga9001_Version_t : " + str(fpga_version_1) + ")'\n")

	print("Preparing to initialize ADRV9001.")

	stream_image_bytes_3 = [0] * 32768
	script_dir = os.path.dirname(os.path.abspath(__file__))
	binary_file_path = os.path.join(script_dir, 'stream_image_bytes_3.bin')
	file = open(binary_file_path, 'rb')
	stream_image_bytes_3 = list(file.read(32768))
	file.close()

	error_code, stream_image_bytes_3 = board.Initialize(initialize_init_3, initialize_radio_ctrl_init_3, 
                                                     stream_image_bytes_3, "C:/Program Files/Analog Devices/ADRV9001 Transceiver Evaluation Software/Resources/Adi.Adrv9001.Firmware/Navassa_EvaluationFw_C0_0.22.30.bin", 
                                                     "C:/Program Files/Analog Devices/ADRV9001 Transceiver Evaluation Software/Resources/Adi.Adrv9001.GainTables/public/ORxGainTable_0.2.2.csv", 
                                                     "C:/Program Files/Analog Devices/ADRV9001 Transceiver Evaluation Software/Resources/Adi.Adrv9001.GainTables/public/RxGainTable_0.4.0.csv", 
                                                     "C:/Program Files/Analog Devices/ADRV9001 Transceiver Evaluation Software/Resources/Adi.Adrv9001.GainTables/public/TxAttenTable_0.1.1.csv", 
                                                     adrv9001_board_types.InitPhase.RESET | adrv9001_board_types.InitPhase.ANALOG | adrv9001_board_types.InitPhase.RESOURCES | adrv9001_board_types.InitPhase.RADIO | adrv9001_board_types.InitPhase.JTAG, 
                                                     adrv9001_types.adrv9001_PartNumber_e.ADRV9001_PART_NUMBER_ADRV9002)

	status_4 = fpga9001_types.fpga9001_ClockStatus_t(False, 0, 0, 0, 0)
	error_code = fpga9001_device_0.clock.Status_Get(status_4)

	print("Status_Get parameter 'status' read back as '(" + "fpga9001_types.fpga9001_ClockStatus_t : " + str(status_4) + ")'\n")

	print("Initialization successful.")

