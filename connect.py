# This file contains code automatically generated by a machine.
# It has not been independently verified by any human.
# The generation process is deterministic and tested (not generative AI),
# but not every scenario or risk has been captured in unit tests.
# All code is provided as-is for example purposes only.
# The customer assumes all risks related to the use of this code.


# 
# Silicon Revision: Presumed C0
# 
# Tx / Rx optimal carrier frequencies: 30 MHz to 6 GHz
# External LO optimal frequencies: 60 MHz to 12 GHz
# 
# FPGA: v0.0.0
# Device Driver API: v0.0.0
# Device Driver Client: v68.13.7
# Firmware: v0.22.30
# Profile Generator: v0.53.6.0
# Stream Generator Assembly: v0.7.11.0
# Transceiver Evaluation Software: v0.26.0
# ADRV9001 Plugin: v0.26.0

import time
import os
import adrv9001_python_wrappers.analog_devices_common_api as common_api_types
import adrv9001_python_wrappers.analog_devices_eval_client_adrv9001_device as adrv9001_types
import adrv9001_python_wrappers.analog_devices_eval_client_fpga9001_device as fpga9001_types
import adrv9001_python_wrappers.analog_devices_adrv9001_profile_types as adrv9001_profile_types
import adrv9001_python_wrappers.analog_devices_eval_client_adrv9001_board as adrv9001_board_types
from adrv9001_python_wrappers import flags
flags.DEEP_PRINT = True
import sys
import clr
import System
from System import Array, Enum, Boolean, SByte, Byte, Int16, UInt16, Int32, UInt32, Int64, UInt64, Single, Double
INSTALL_DIRECTORY = 'C:/Program Files/Analog Devices/ADRV9001 Transceiver Evaluation Software/'
CLIENT_DIRECTORY = 'C:/Program Files/Analog Devices/ADRV9001 Transceiver Evaluation Software/'

sys.path.append(INSTALL_DIRECTORY)

clr.AddReference("AnalogDevices.EvalClient")
clr.AddReference("AnalogDevices.EvalClient.Installers")
clr.AddReference("AnalogDevices.Peitho")
clr.AddReference("System")
from System.Net import *
from AnalogDevices.Peitho import *
from AnalogDevices.EvalClient import *
from AnalogDevices.EvalClient.Installers import *


def build_str_buff(size, s):
	buff = [0] * size
	ba = bytearray(s, 'utf8')
	for i, v in enumerate(ba):
		buff[i] = v
	return buff



def connect():
	username = 'root'
	password = 'analog'
	serverLocation = '/home/analog/adrv9001_server/resources/Adi.Adrv9001.Server/'
	serverName = 'Adrv9001Server_C0'
	serverManager = ServerManager.CreateServerManager('192.168.1.10', username, password, serverLocation, serverName)
	serverManager.Start()
	connectionAttempts = 0
	while (not serverManager.IsRunning and connectionAttempts < 5):
		time.sleep(0.2)
		connectionAttempts = connectionAttempts + 1
	
	EvalClientManager.Instance.Initialize(CLIENT_DIRECTORY)
	context = RootExecutionContext(IPEndPoint(IPAddress.Parse('192.168.1.10'), 8080))
	context.Timeout_ms = 999999
	context.ErrorRetriever = LabviewErrorRetriever()
	context.ErrorHandler = ServerExceptionThrower()
	platform = EvalClientManager.Instance.PlatformBuilder.CreatePlatform('zc706sd20', context)
	platform.Timeout = 60000
	platform.FallbackBoardType = 'adrv9001ce'
	Csboard = list(platform.Boards)[0]
	clr.AddReference("AnalogDevices.EvalClient.Adrv9001.Board")
	from AnalogDevices.EvalClient.Adrv9001.Board import Adrv9001BoardCe as CsAdrv9001BoardCe
	board = adrv9001_board_types.Adrv9001BoardCe(Csboard)

	clr.AddReference("AnalogDevices.EvalClient.Adrv9001.Device")
	from AnalogDevices.EvalClient.Adrv9001.Device import Adrv9001Device as CsAdrv9001Device
	adrv9001_device_0 = adrv9001_types.Adrv9001Device(CsAdrv9001Device(context))
	clr.AddReference("AnalogDevices.EvalClient.Fpga9001.Device")
	from AnalogDevices.EvalClient.Fpga9001.Device import Fpga9001Device as CsFpga9001Device
	fpga9001_device_0 = fpga9001_types.Fpga9001Device(CsFpga9001Device(context))

	return board, adrv9001_device_0, fpga9001_device_0

def finish():
	return
